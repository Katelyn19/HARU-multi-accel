// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "subsequence_search.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic subsequence_search::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic subsequence_search::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<14> subsequence_search::ap_ST_fsm_state1 = "1";
const sc_lv<14> subsequence_search::ap_ST_fsm_state2 = "10";
const sc_lv<14> subsequence_search::ap_ST_fsm_state3 = "100";
const sc_lv<14> subsequence_search::ap_ST_fsm_state4 = "1000";
const sc_lv<14> subsequence_search::ap_ST_fsm_state5 = "10000";
const sc_lv<14> subsequence_search::ap_ST_fsm_state6 = "100000";
const sc_lv<14> subsequence_search::ap_ST_fsm_state7 = "1000000";
const sc_lv<14> subsequence_search::ap_ST_fsm_state8 = "10000000";
const sc_lv<14> subsequence_search::ap_ST_fsm_state9 = "100000000";
const sc_lv<14> subsequence_search::ap_ST_fsm_state10 = "1000000000";
const sc_lv<14> subsequence_search::ap_ST_fsm_state11 = "10000000000";
const sc_lv<14> subsequence_search::ap_ST_fsm_state12 = "100000000000";
const sc_lv<14> subsequence_search::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<14> subsequence_search::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<32> subsequence_search::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> subsequence_search::ap_const_lv32_1 = "1";
const sc_lv<32> subsequence_search::ap_const_lv32_8 = "1000";
const sc_lv<32> subsequence_search::ap_const_lv32_4 = "100";
const sc_lv<32> subsequence_search::ap_const_lv32_6 = "110";
const sc_lv<32> subsequence_search::ap_const_lv32_2 = "10";
const sc_lv<32> subsequence_search::ap_const_lv32_3 = "11";
const sc_lv<1> subsequence_search::ap_const_lv1_0 = "0";
const sc_lv<1> subsequence_search::ap_const_lv1_1 = "1";
const sc_lv<32> subsequence_search::ap_const_lv32_7 = "111";
const sc_lv<32> subsequence_search::ap_const_lv32_9 = "1001";
const sc_lv<32> subsequence_search::ap_const_lv32_A = "1010";
const sc_lv<32> subsequence_search::ap_const_lv32_B = "1011";
const sc_lv<32> subsequence_search::ap_const_lv32_C = "1100";
const sc_lv<32> subsequence_search::ap_const_lv32_D = "1101";
const sc_lv<8> subsequence_search::ap_const_lv8_1 = "1";
const sc_lv<32> subsequence_search::ap_const_lv32_5 = "101";
const sc_lv<16> subsequence_search::ap_const_lv16_1 = "1";
const sc_lv<64> subsequence_search::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> subsequence_search::ap_const_lv64_F9 = "11111001";
const sc_lv<64> subsequence_search::ap_const_lv64_1 = "1";
const sc_lv<8> subsequence_search::ap_const_lv8_FA = "11111010";
const sc_lv<8> subsequence_search::ap_const_lv8_FF = "11111111";
const sc_lv<16> subsequence_search::ap_const_lv16_BD71 = "1011110101110001";
const sc_lv<8> subsequence_search::ap_const_lv8_F9 = "11111001";
const bool subsequence_search::ap_const_boolean_1 = true;

subsequence_search::subsequence_search(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cost_x_U = new subsequence_searcbkb("cost_x_U");
    cost_x_U->clk(ap_clk);
    cost_x_U->reset(ap_rst);
    cost_x_U->address0(cost_x_address0);
    cost_x_U->ce0(cost_x_ce0);
    cost_x_U->we0(cost_x_we0);
    cost_x_U->d0(cost_x_d0);
    cost_x_U->q0(cost_x_q0);
    cost_x_U->address1(cost_x_address1);
    cost_x_U->ce1(cost_x_ce1);
    cost_x_U->we1(cost_x_we1);
    cost_x_U->d1(cost_x_d1);
    cost_x_U->q1(cost_x_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_abs11_fu_495_p3);
    sensitive << ( sub_ln43_reg_682 );
    sensitive << ( abscond10_fu_490_p2 );
    sensitive << ( neg9_fu_485_p2 );

    SC_METHOD(thread_abs14_fu_445_p3);
    sensitive << ( sub_ln50_fu_428_p2 );
    sensitive << ( abscond13_fu_439_p2 );
    sensitive << ( neg12_fu_433_p2 );

    SC_METHOD(thread_abs5_fu_376_p3);
    sensitive << ( reg_316 );
    sensitive << ( grp_fu_332_p2 );
    sensitive << ( grp_fu_326_p2 );

    SC_METHOD(thread_abscond10_fu_490_p2);
    sensitive << ( sub_ln43_reg_682 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_abscond13_fu_439_p2);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln42_fu_406_p2 );
    sensitive << ( sub_ln50_fu_428_p2 );

    SC_METHOD(thread_add_ln26_1_fu_384_p2);
    sensitive << ( reg_320 );
    sensitive << ( abs5_fu_376_p3 );

    SC_METHOD(thread_add_ln26_fu_359_p2);
    sensitive << ( r_0_reg_193 );

    SC_METHOD(thread_add_ln50_fu_467_p2);
    sensitive << ( abs14_fu_445_p3 );
    sensitive << ( min_2_fu_459_p3 );

    SC_METHOD(thread_agg_result_dist);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln33_fu_395_p2 );
    sensitive << ( agg_result_dist_loca_reg_204 );

    SC_METHOD(thread_agg_result_dist_ap_vld);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln33_fu_395_p2 );

    SC_METHOD(thread_agg_result_end_position);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln33_fu_395_p2 );
    sensitive << ( agg_result_end_posit_reg_215 );

    SC_METHOD(thread_agg_result_end_position_ap_vld);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln33_fu_395_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln33_fu_395_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln33_fu_395_p2 );

    SC_METHOD(thread_cost_x_addr_reg_562);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cost_x_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( cost_x_addr_reg_562 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln26_reg_571 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln25_fu_348_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln26_1_fu_365_p1 );

    SC_METHOD(thread_cost_x_address1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( zext_ln43_reg_643 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln45_fu_423_p1 );

    SC_METHOD(thread_cost_x_ce0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln25_fu_348_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_cost_x_ce1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_cost_x_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_fu_338_p3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( add_ln26_1_fu_384_p2 );

    SC_METHOD(thread_cost_x_d1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( grp_fu_338_p3 );
    sensitive << ( add_ln50_reg_669 );
    sensitive << ( top_1_fu_514_p2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_cost_x_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_cost_x_we1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_291_p0);
    sensitive << ( x_q0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( x_load_reg_557 );

    SC_METHOD(thread_grp_fu_291_p1);
    sensitive << ( y_q0 );
    sensitive << ( reg_311 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_fu_291_p2);
    sensitive << ( grp_fu_291_p0 );
    sensitive << ( grp_fu_291_p1 );

    SC_METHOD(thread_grp_fu_297_p2);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln42_fu_406_p2 );
    sensitive << ( top_left_1_reg_260 );
    sensitive << ( min_reg_271 );

    SC_METHOD(thread_grp_fu_303_p3);
    sensitive << ( top_left_1_reg_260 );
    sensitive << ( min_reg_271 );
    sensitive << ( grp_fu_297_p2 );

    SC_METHOD(thread_grp_fu_326_p2);
    sensitive << ( reg_316 );

    SC_METHOD(thread_grp_fu_332_p2);
    sensitive << ( reg_316 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_fu_338_p3);
    sensitive << ( reg_316 );
    sensitive << ( grp_fu_332_p2 );
    sensitive << ( grp_fu_326_p2 );

    SC_METHOD(thread_i_fu_417_p2);
    sensitive << ( i_0_reg_280 );

    SC_METHOD(thread_icmp_ln11_1_fu_502_p2);
    sensitive << ( select_ln7_1_reg_653 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( min_1_reg_250 );

    SC_METHOD(thread_icmp_ln11_fu_453_p2);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln42_fu_406_p2 );
    sensitive << ( grp_fu_303_p3 );
    sensitive << ( min_1_reg_250 );

    SC_METHOD(thread_icmp_ln25_fu_348_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( r_0_reg_193 );

    SC_METHOD(thread_icmp_ln33_fu_395_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( j_0_reg_238 );

    SC_METHOD(thread_icmp_ln42_fu_406_p2);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( i_0_reg_280 );

    SC_METHOD(thread_icmp_ln51_fu_521_p2);
    sensitive << ( add_ln50_reg_669 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( agg_result_dist_load_reg_228 );

    SC_METHOD(thread_j_fu_473_p2);
    sensitive << ( j_0_reg_238 );

    SC_METHOD(thread_min_2_fu_459_p3);
    sensitive << ( grp_fu_303_p3 );
    sensitive << ( min_1_reg_250 );
    sensitive << ( icmp_ln11_fu_453_p2 );

    SC_METHOD(thread_min_3_fu_507_p3);
    sensitive << ( select_ln7_1_reg_653 );
    sensitive << ( min_1_reg_250 );
    sensitive << ( icmp_ln11_1_fu_502_p2 );

    SC_METHOD(thread_neg12_fu_433_p2);
    sensitive << ( sub_ln50_fu_428_p2 );

    SC_METHOD(thread_neg9_fu_485_p2);
    sensitive << ( sub_ln43_reg_682 );

    SC_METHOD(thread_r_fu_370_p2);
    sensitive << ( r_0_reg_193 );

    SC_METHOD(thread_select_ln51_1_fu_533_p3);
    sensitive << ( zext_ln33_reg_612 );
    sensitive << ( agg_result_end_posit_reg_215 );
    sensitive << ( icmp_ln51_fu_521_p2 );

    SC_METHOD(thread_select_ln51_2_fu_540_p3);
    sensitive << ( add_ln50_reg_669 );
    sensitive << ( agg_result_dist_load_reg_228 );
    sensitive << ( icmp_ln51_fu_521_p2 );

    SC_METHOD(thread_select_ln51_fu_526_p3);
    sensitive << ( add_ln50_reg_669 );
    sensitive << ( agg_result_dist_loca_reg_204 );
    sensitive << ( icmp_ln51_fu_521_p2 );

    SC_METHOD(thread_sub_ln43_fu_479_p2);
    sensitive << ( x_q0 );
    sensitive << ( reg_311 );

    SC_METHOD(thread_sub_ln50_fu_428_p2);
    sensitive << ( reg_311 );
    sensitive << ( x_load_2_reg_607 );

    SC_METHOD(thread_top_1_fu_514_p2);
    sensitive << ( min_3_fu_507_p3 );
    sensitive << ( abs11_fu_495_p3 );

    SC_METHOD(thread_x_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( zext_ln26_fu_354_p1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln25_fu_348_p2 );
    sensitive << ( zext_ln43_fu_412_p1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln25_fu_348_p2 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_y_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln36_fu_401_p1 );

    SC_METHOD(thread_y_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_zext_ln26_1_fu_365_p1);
    sensitive << ( add_ln26_fu_359_p2 );

    SC_METHOD(thread_zext_ln26_fu_354_p1);
    sensitive << ( r_0_reg_193 );

    SC_METHOD(thread_zext_ln33_fu_391_p1);
    sensitive << ( j_0_reg_238 );

    SC_METHOD(thread_zext_ln36_fu_401_p1);
    sensitive << ( j_0_reg_238 );

    SC_METHOD(thread_zext_ln43_fu_412_p1);
    sensitive << ( i_0_reg_280 );

    SC_METHOD(thread_zext_ln45_fu_423_p1);
    sensitive << ( i_fu_417_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln25_fu_348_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln33_fu_395_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln42_fu_406_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "subsequence_search_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, agg_result_dist, "(port)agg_result_dist");
    sc_trace(mVcdFile, agg_result_dist_ap_vld, "(port)agg_result_dist_ap_vld");
    sc_trace(mVcdFile, agg_result_end_position, "(port)agg_result_end_position");
    sc_trace(mVcdFile, agg_result_end_position_ap_vld, "(port)agg_result_end_position_ap_vld");
    sc_trace(mVcdFile, x_address0, "(port)x_address0");
    sc_trace(mVcdFile, x_ce0, "(port)x_ce0");
    sc_trace(mVcdFile, x_q0, "(port)x_q0");
    sc_trace(mVcdFile, y_address0, "(port)y_address0");
    sc_trace(mVcdFile, y_ce0, "(port)y_ce0");
    sc_trace(mVcdFile, y_q0, "(port)y_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_311, "reg_311");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_291_p2, "grp_fu_291_p2");
    sc_trace(mVcdFile, reg_316, "reg_316");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, cost_x_q0, "cost_x_q0");
    sc_trace(mVcdFile, reg_320, "reg_320");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, x_load_reg_557, "x_load_reg_557");
    sc_trace(mVcdFile, cost_x_addr_reg_562, "cost_x_addr_reg_562");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln26_fu_354_p1, "zext_ln26_fu_354_p1");
    sc_trace(mVcdFile, zext_ln26_reg_571, "zext_ln26_reg_571");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln25_fu_348_p2, "icmp_ln25_fu_348_p2");
    sc_trace(mVcdFile, r_fu_370_p2, "r_fu_370_p2");
    sc_trace(mVcdFile, r_reg_586, "r_reg_586");
    sc_trace(mVcdFile, x_load_2_reg_607, "x_load_2_reg_607");
    sc_trace(mVcdFile, zext_ln33_fu_391_p1, "zext_ln33_fu_391_p1");
    sc_trace(mVcdFile, zext_ln33_reg_612, "zext_ln33_reg_612");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, icmp_ln33_fu_395_p2, "icmp_ln33_fu_395_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, cost_x_q1, "cost_x_q1");
    sc_trace(mVcdFile, grp_fu_338_p3, "grp_fu_338_p3");
    sc_trace(mVcdFile, zext_ln43_fu_412_p1, "zext_ln43_fu_412_p1");
    sc_trace(mVcdFile, zext_ln43_reg_643, "zext_ln43_reg_643");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, icmp_ln42_fu_406_p2, "icmp_ln42_fu_406_p2");
    sc_trace(mVcdFile, grp_fu_303_p3, "grp_fu_303_p3");
    sc_trace(mVcdFile, select_ln7_1_reg_653, "select_ln7_1_reg_653");
    sc_trace(mVcdFile, i_fu_417_p2, "i_fu_417_p2");
    sc_trace(mVcdFile, i_reg_659, "i_reg_659");
    sc_trace(mVcdFile, add_ln50_fu_467_p2, "add_ln50_fu_467_p2");
    sc_trace(mVcdFile, add_ln50_reg_669, "add_ln50_reg_669");
    sc_trace(mVcdFile, j_fu_473_p2, "j_fu_473_p2");
    sc_trace(mVcdFile, j_reg_677, "j_reg_677");
    sc_trace(mVcdFile, sub_ln43_fu_479_p2, "sub_ln43_fu_479_p2");
    sc_trace(mVcdFile, sub_ln43_reg_682, "sub_ln43_reg_682");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, left_1_reg_689, "left_1_reg_689");
    sc_trace(mVcdFile, top_1_fu_514_p2, "top_1_fu_514_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, select_ln51_fu_526_p3, "select_ln51_fu_526_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, select_ln51_1_fu_533_p3, "select_ln51_1_fu_533_p3");
    sc_trace(mVcdFile, select_ln51_2_fu_540_p3, "select_ln51_2_fu_540_p3");
    sc_trace(mVcdFile, cost_x_address0, "cost_x_address0");
    sc_trace(mVcdFile, cost_x_ce0, "cost_x_ce0");
    sc_trace(mVcdFile, cost_x_we0, "cost_x_we0");
    sc_trace(mVcdFile, cost_x_d0, "cost_x_d0");
    sc_trace(mVcdFile, cost_x_address1, "cost_x_address1");
    sc_trace(mVcdFile, cost_x_ce1, "cost_x_ce1");
    sc_trace(mVcdFile, cost_x_we1, "cost_x_we1");
    sc_trace(mVcdFile, cost_x_d1, "cost_x_d1");
    sc_trace(mVcdFile, r_0_reg_193, "r_0_reg_193");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, agg_result_dist_loca_reg_204, "agg_result_dist_loca_reg_204");
    sc_trace(mVcdFile, agg_result_end_posit_reg_215, "agg_result_end_posit_reg_215");
    sc_trace(mVcdFile, agg_result_dist_load_reg_228, "agg_result_dist_load_reg_228");
    sc_trace(mVcdFile, j_0_reg_238, "j_0_reg_238");
    sc_trace(mVcdFile, min_1_reg_250, "min_1_reg_250");
    sc_trace(mVcdFile, top_left_1_reg_260, "top_left_1_reg_260");
    sc_trace(mVcdFile, min_reg_271, "min_reg_271");
    sc_trace(mVcdFile, i_0_reg_280, "i_0_reg_280");
    sc_trace(mVcdFile, zext_ln26_1_fu_365_p1, "zext_ln26_1_fu_365_p1");
    sc_trace(mVcdFile, zext_ln36_fu_401_p1, "zext_ln36_fu_401_p1");
    sc_trace(mVcdFile, zext_ln45_fu_423_p1, "zext_ln45_fu_423_p1");
    sc_trace(mVcdFile, add_ln26_1_fu_384_p2, "add_ln26_1_fu_384_p2");
    sc_trace(mVcdFile, grp_fu_291_p0, "grp_fu_291_p0");
    sc_trace(mVcdFile, grp_fu_291_p1, "grp_fu_291_p1");
    sc_trace(mVcdFile, grp_fu_297_p2, "grp_fu_297_p2");
    sc_trace(mVcdFile, grp_fu_332_p2, "grp_fu_332_p2");
    sc_trace(mVcdFile, grp_fu_326_p2, "grp_fu_326_p2");
    sc_trace(mVcdFile, add_ln26_fu_359_p2, "add_ln26_fu_359_p2");
    sc_trace(mVcdFile, abs5_fu_376_p3, "abs5_fu_376_p3");
    sc_trace(mVcdFile, sub_ln50_fu_428_p2, "sub_ln50_fu_428_p2");
    sc_trace(mVcdFile, abscond13_fu_439_p2, "abscond13_fu_439_p2");
    sc_trace(mVcdFile, neg12_fu_433_p2, "neg12_fu_433_p2");
    sc_trace(mVcdFile, icmp_ln11_fu_453_p2, "icmp_ln11_fu_453_p2");
    sc_trace(mVcdFile, abs14_fu_445_p3, "abs14_fu_445_p3");
    sc_trace(mVcdFile, min_2_fu_459_p3, "min_2_fu_459_p3");
    sc_trace(mVcdFile, abscond10_fu_490_p2, "abscond10_fu_490_p2");
    sc_trace(mVcdFile, neg9_fu_485_p2, "neg9_fu_485_p2");
    sc_trace(mVcdFile, icmp_ln11_1_fu_502_p2, "icmp_ln11_1_fu_502_p2");
    sc_trace(mVcdFile, min_3_fu_507_p3, "min_3_fu_507_p3");
    sc_trace(mVcdFile, abs11_fu_495_p3, "abs11_fu_495_p3");
    sc_trace(mVcdFile, icmp_ln51_fu_521_p2, "icmp_ln51_fu_521_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("subsequence_search.hdltvin.dat");
    mHdltvoutHandle.open("subsequence_search.hdltvout.dat");
}

subsequence_search::~subsequence_search() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete cost_x_U;
}

void subsequence_search::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        agg_result_dist_load_reg_228 = select_ln51_2_fu_540_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        agg_result_dist_load_reg_228 = cost_x_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        agg_result_dist_loca_reg_204 = select_ln51_fu_526_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        agg_result_dist_loca_reg_204 = cost_x_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        agg_result_end_posit_reg_215 = select_ln51_1_fu_533_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        agg_result_end_posit_reg_215 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        i_0_reg_280 = i_reg_659.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_0_reg_280 = ap_const_lv8_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        j_0_reg_238 = j_reg_677.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        j_0_reg_238 = ap_const_lv16_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        min_1_reg_250 = top_left_1_reg_260.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        min_1_reg_250 = cost_x_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        min_reg_271 = top_1_fu_514_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        min_reg_271 = grp_fu_338_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        r_0_reg_193 = r_reg_586.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        r_0_reg_193 = ap_const_lv8_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        top_left_1_reg_260 = left_1_reg_689.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        top_left_1_reg_260 = cost_x_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln42_fu_406_p2.read()))) {
        add_ln50_reg_669 = add_ln50_fu_467_p2.read();
        j_reg_677 = j_fu_473_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln42_fu_406_p2.read()))) {
        i_reg_659 = i_fu_417_p2.read();
        select_ln7_1_reg_653 = grp_fu_303_p3.read();
        zext_ln43_reg_643 = zext_ln43_fu_412_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        left_1_reg_689 = cost_x_q1.read();
        sub_ln43_reg_682 = sub_ln43_fu_479_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln25_fu_348_p2.read(), ap_const_lv1_0))) {
        r_reg_586 = r_fu_370_p2.read();
        zext_ln26_reg_571 = zext_ln26_fu_354_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        reg_311 = y_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        reg_316 = grp_fu_291_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        reg_320 = cost_x_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        x_load_2_reg_607 = x_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_load_reg_557 = x_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        zext_ln33_reg_612 = zext_ln33_fu_391_p1.read();
    }
}

void subsequence_search::thread_abs11_fu_495_p3() {
    abs11_fu_495_p3 = (!abscond10_fu_490_p2.read()[0].is_01())? sc_lv<32>(): ((abscond10_fu_490_p2.read()[0].to_bool())? sub_ln43_reg_682.read(): neg9_fu_485_p2.read());
}

void subsequence_search::thread_abs14_fu_445_p3() {
    abs14_fu_445_p3 = (!abscond13_fu_439_p2.read()[0].is_01())? sc_lv<32>(): ((abscond13_fu_439_p2.read()[0].to_bool())? sub_ln50_fu_428_p2.read(): neg12_fu_433_p2.read());
}

void subsequence_search::thread_abs5_fu_376_p3() {
    abs5_fu_376_p3 = (!grp_fu_332_p2.read()[0].is_01())? sc_lv<32>(): ((grp_fu_332_p2.read()[0].to_bool())? reg_316.read(): grp_fu_326_p2.read());
}

void subsequence_search::thread_abscond10_fu_490_p2() {
    abscond10_fu_490_p2 = (!sub_ln43_reg_682.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): (sc_bigint<32>(sub_ln43_reg_682.read()) > sc_bigint<32>(ap_const_lv32_0));
}

void subsequence_search::thread_abscond13_fu_439_p2() {
    abscond13_fu_439_p2 = (!sub_ln50_fu_428_p2.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): (sc_bigint<32>(sub_ln50_fu_428_p2.read()) > sc_bigint<32>(ap_const_lv32_0));
}

void subsequence_search::thread_add_ln26_1_fu_384_p2() {
    add_ln26_1_fu_384_p2 = (!reg_320.read().is_01() || !abs5_fu_376_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(reg_320.read()) + sc_biguint<32>(abs5_fu_376_p3.read()));
}

void subsequence_search::thread_add_ln26_fu_359_p2() {
    add_ln26_fu_359_p2 = (!r_0_reg_193.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<8>(): (sc_biguint<8>(r_0_reg_193.read()) + sc_bigint<8>(ap_const_lv8_FF));
}

void subsequence_search::thread_add_ln50_fu_467_p2() {
    add_ln50_fu_467_p2 = (!abs14_fu_445_p3.read().is_01() || !min_2_fu_459_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(abs14_fu_445_p3.read()) + sc_biguint<32>(min_2_fu_459_p3.read()));
}

void subsequence_search::thread_agg_result_dist() {
    agg_result_dist = agg_result_dist_loca_reg_204.read();
}

void subsequence_search::thread_agg_result_dist_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_395_p2.read()))) {
        agg_result_dist_ap_vld = ap_const_logic_1;
    } else {
        agg_result_dist_ap_vld = ap_const_logic_0;
    }
}

void subsequence_search::thread_agg_result_end_position() {
    agg_result_end_position = agg_result_end_posit_reg_215.read();
}

void subsequence_search::thread_agg_result_end_position_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_395_p2.read()))) {
        agg_result_end_position_ap_vld = ap_const_logic_1;
    } else {
        agg_result_end_position_ap_vld = ap_const_logic_0;
    }
}

void subsequence_search::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void subsequence_search::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void subsequence_search::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void subsequence_search::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void subsequence_search::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void subsequence_search::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void subsequence_search::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void subsequence_search::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void subsequence_search::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void subsequence_search::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void subsequence_search::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void subsequence_search::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void subsequence_search::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void subsequence_search::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void subsequence_search::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_395_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void subsequence_search::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void subsequence_search::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_395_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void subsequence_search::thread_cost_x_addr_reg_562() {
    cost_x_addr_reg_562 =  (sc_lv<8>) (ap_const_lv64_0);
}

void subsequence_search::thread_cost_x_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cost_x_address0 = cost_x_addr_reg_562.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cost_x_address0 =  (sc_lv<8>) (zext_ln26_reg_571.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln25_fu_348_p2.read(), ap_const_lv1_1))) {
        cost_x_address0 =  (sc_lv<8>) (ap_const_lv64_F9);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln25_fu_348_p2.read(), ap_const_lv1_0))) {
        cost_x_address0 =  (sc_lv<8>) (zext_ln26_1_fu_365_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cost_x_address0 =  (sc_lv<8>) (ap_const_lv64_0);
    } else {
        cost_x_address0 = "XXXXXXXX";
    }
}

void subsequence_search::thread_cost_x_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        cost_x_address1 =  (sc_lv<8>) (ap_const_lv64_F9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        cost_x_address1 =  (sc_lv<8>) (zext_ln43_reg_643.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        cost_x_address1 =  (sc_lv<8>) (zext_ln45_fu_423_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        cost_x_address1 =  (sc_lv<8>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cost_x_address1 =  (sc_lv<8>) (ap_const_lv64_1);
    } else {
        cost_x_address1 = "XXXXXXXX";
    }
}

void subsequence_search::thread_cost_x_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(icmp_ln25_fu_348_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(icmp_ln25_fu_348_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        cost_x_ce0 = ap_const_logic_1;
    } else {
        cost_x_ce0 = ap_const_logic_0;
    }
}

void subsequence_search::thread_cost_x_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        cost_x_ce1 = ap_const_logic_1;
    } else {
        cost_x_ce1 = ap_const_logic_0;
    }
}

void subsequence_search::thread_cost_x_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        cost_x_d0 = add_ln26_1_fu_384_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cost_x_d0 = grp_fu_338_p3.read();
    } else {
        cost_x_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void subsequence_search::thread_cost_x_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        cost_x_d1 = add_ln50_reg_669.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        cost_x_d1 = top_1_fu_514_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        cost_x_d1 = grp_fu_338_p3.read();
    } else {
        cost_x_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void subsequence_search::thread_cost_x_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        cost_x_we0 = ap_const_logic_1;
    } else {
        cost_x_we0 = ap_const_logic_0;
    }
}

void subsequence_search::thread_cost_x_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        cost_x_we1 = ap_const_logic_1;
    } else {
        cost_x_we1 = ap_const_logic_0;
    }
}

void subsequence_search::thread_grp_fu_291_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_291_p0 = x_load_reg_557.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        grp_fu_291_p0 = x_q0.read();
    } else {
        grp_fu_291_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void subsequence_search::thread_grp_fu_291_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_fu_291_p1 = reg_311.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        grp_fu_291_p1 = y_q0.read();
    } else {
        grp_fu_291_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void subsequence_search::thread_grp_fu_291_p2() {
    grp_fu_291_p2 = (!grp_fu_291_p0.read().is_01() || !grp_fu_291_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(grp_fu_291_p0.read()) - sc_biguint<32>(grp_fu_291_p1.read()));
}

void subsequence_search::thread_grp_fu_297_p2() {
    grp_fu_297_p2 = (!top_left_1_reg_260.read().is_01() || !min_reg_271.read().is_01())? sc_lv<1>(): (sc_bigint<32>(top_left_1_reg_260.read()) < sc_bigint<32>(min_reg_271.read()));
}

void subsequence_search::thread_grp_fu_303_p3() {
    grp_fu_303_p3 = (!grp_fu_297_p2.read()[0].is_01())? sc_lv<32>(): ((grp_fu_297_p2.read()[0].to_bool())? top_left_1_reg_260.read(): min_reg_271.read());
}

void subsequence_search::thread_grp_fu_326_p2() {
    grp_fu_326_p2 = (!ap_const_lv32_0.is_01() || !reg_316.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(reg_316.read()));
}

void subsequence_search::thread_grp_fu_332_p2() {
    grp_fu_332_p2 = (!reg_316.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): (sc_bigint<32>(reg_316.read()) > sc_bigint<32>(ap_const_lv32_0));
}

void subsequence_search::thread_grp_fu_338_p3() {
    grp_fu_338_p3 = (!grp_fu_332_p2.read()[0].is_01())? sc_lv<32>(): ((grp_fu_332_p2.read()[0].to_bool())? reg_316.read(): grp_fu_326_p2.read());
}

void subsequence_search::thread_i_fu_417_p2() {
    i_fu_417_p2 = (!i_0_reg_280.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_0_reg_280.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void subsequence_search::thread_icmp_ln11_1_fu_502_p2() {
    icmp_ln11_1_fu_502_p2 = (!select_ln7_1_reg_653.read().is_01() || !min_1_reg_250.read().is_01())? sc_lv<1>(): (sc_bigint<32>(select_ln7_1_reg_653.read()) > sc_bigint<32>(min_1_reg_250.read()));
}

void subsequence_search::thread_icmp_ln11_fu_453_p2() {
    icmp_ln11_fu_453_p2 = (!grp_fu_303_p3.read().is_01() || !min_1_reg_250.read().is_01())? sc_lv<1>(): (sc_bigint<32>(grp_fu_303_p3.read()) > sc_bigint<32>(min_1_reg_250.read()));
}

void subsequence_search::thread_icmp_ln25_fu_348_p2() {
    icmp_ln25_fu_348_p2 = (!r_0_reg_193.read().is_01() || !ap_const_lv8_FA.is_01())? sc_lv<1>(): sc_lv<1>(r_0_reg_193.read() == ap_const_lv8_FA);
}

void subsequence_search::thread_icmp_ln33_fu_395_p2() {
    icmp_ln33_fu_395_p2 = (!j_0_reg_238.read().is_01() || !ap_const_lv16_BD71.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_238.read() == ap_const_lv16_BD71);
}

void subsequence_search::thread_icmp_ln42_fu_406_p2() {
    icmp_ln42_fu_406_p2 = (!i_0_reg_280.read().is_01() || !ap_const_lv8_F9.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_280.read() == ap_const_lv8_F9);
}

void subsequence_search::thread_icmp_ln51_fu_521_p2() {
    icmp_ln51_fu_521_p2 = (!add_ln50_reg_669.read().is_01() || !agg_result_dist_load_reg_228.read().is_01())? sc_lv<1>(): (sc_bigint<32>(add_ln50_reg_669.read()) < sc_bigint<32>(agg_result_dist_load_reg_228.read()));
}

void subsequence_search::thread_j_fu_473_p2() {
    j_fu_473_p2 = (!j_0_reg_238.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(j_0_reg_238.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void subsequence_search::thread_min_2_fu_459_p3() {
    min_2_fu_459_p3 = (!icmp_ln11_fu_453_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln11_fu_453_p2.read()[0].to_bool())? min_1_reg_250.read(): grp_fu_303_p3.read());
}

void subsequence_search::thread_min_3_fu_507_p3() {
    min_3_fu_507_p3 = (!icmp_ln11_1_fu_502_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln11_1_fu_502_p2.read()[0].to_bool())? min_1_reg_250.read(): select_ln7_1_reg_653.read());
}

void subsequence_search::thread_neg12_fu_433_p2() {
    neg12_fu_433_p2 = (!ap_const_lv32_0.is_01() || !sub_ln50_fu_428_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(sub_ln50_fu_428_p2.read()));
}

void subsequence_search::thread_neg9_fu_485_p2() {
    neg9_fu_485_p2 = (!ap_const_lv32_0.is_01() || !sub_ln43_reg_682.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(sub_ln43_reg_682.read()));
}

void subsequence_search::thread_r_fu_370_p2() {
    r_fu_370_p2 = (!r_0_reg_193.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(r_0_reg_193.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void subsequence_search::thread_select_ln51_1_fu_533_p3() {
    select_ln51_1_fu_533_p3 = (!icmp_ln51_fu_521_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln51_fu_521_p2.read()[0].to_bool())? zext_ln33_reg_612.read(): agg_result_end_posit_reg_215.read());
}

void subsequence_search::thread_select_ln51_2_fu_540_p3() {
    select_ln51_2_fu_540_p3 = (!icmp_ln51_fu_521_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln51_fu_521_p2.read()[0].to_bool())? add_ln50_reg_669.read(): agg_result_dist_load_reg_228.read());
}

void subsequence_search::thread_select_ln51_fu_526_p3() {
    select_ln51_fu_526_p3 = (!icmp_ln51_fu_521_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln51_fu_521_p2.read()[0].to_bool())? add_ln50_reg_669.read(): agg_result_dist_loca_reg_204.read());
}

void subsequence_search::thread_sub_ln43_fu_479_p2() {
    sub_ln43_fu_479_p2 = (!x_q0.read().is_01() || !reg_311.read().is_01())? sc_lv<32>(): (sc_biguint<32>(x_q0.read()) - sc_biguint<32>(reg_311.read()));
}

void subsequence_search::thread_sub_ln50_fu_428_p2() {
    sub_ln50_fu_428_p2 = (!x_load_2_reg_607.read().is_01() || !reg_311.read().is_01())? sc_lv<32>(): (sc_biguint<32>(x_load_2_reg_607.read()) - sc_biguint<32>(reg_311.read()));
}

void subsequence_search::thread_top_1_fu_514_p2() {
    top_1_fu_514_p2 = (!min_3_fu_507_p3.read().is_01() || !abs11_fu_495_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(min_3_fu_507_p3.read()) + sc_biguint<32>(abs11_fu_495_p3.read()));
}

void subsequence_search::thread_x_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        x_address0 =  (sc_lv<8>) (zext_ln43_fu_412_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln25_fu_348_p2.read(), ap_const_lv1_1))) {
        x_address0 =  (sc_lv<8>) (ap_const_lv64_F9);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln25_fu_348_p2.read(), ap_const_lv1_0))) {
        x_address0 =  (sc_lv<8>) (zext_ln26_fu_354_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        x_address0 =  (sc_lv<8>) (ap_const_lv64_0);
    } else {
        x_address0 = "XXXXXXXX";
    }
}

void subsequence_search::thread_x_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(icmp_ln25_fu_348_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(icmp_ln25_fu_348_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        x_ce0 = ap_const_logic_1;
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void subsequence_search::thread_y_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        y_address0 =  (sc_lv<16>) (zext_ln36_fu_401_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        y_address0 =  (sc_lv<16>) (ap_const_lv64_0);
    } else {
        y_address0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void subsequence_search::thread_y_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        y_ce0 = ap_const_logic_1;
    } else {
        y_ce0 = ap_const_logic_0;
    }
}

void subsequence_search::thread_zext_ln26_1_fu_365_p1() {
    zext_ln26_1_fu_365_p1 = esl_zext<64,8>(add_ln26_fu_359_p2.read());
}

void subsequence_search::thread_zext_ln26_fu_354_p1() {
    zext_ln26_fu_354_p1 = esl_zext<64,8>(r_0_reg_193.read());
}

void subsequence_search::thread_zext_ln33_fu_391_p1() {
    zext_ln33_fu_391_p1 = esl_zext<32,16>(j_0_reg_238.read());
}

void subsequence_search::thread_zext_ln36_fu_401_p1() {
    zext_ln36_fu_401_p1 = esl_zext<64,16>(j_0_reg_238.read());
}

void subsequence_search::thread_zext_ln43_fu_412_p1() {
    zext_ln43_fu_412_p1 = esl_zext<64,8>(i_0_reg_280.read());
}

void subsequence_search::thread_zext_ln45_fu_423_p1() {
    zext_ln45_fu_423_p1 = esl_zext<64,8>(i_fu_417_p2.read());
}

void subsequence_search::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln25_fu_348_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_395_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln42_fu_406_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<14>) ("XXXXXXXXXXXXXX");
            break;
    }
}

void subsequence_search::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"agg_result_dist\" :  \"" << agg_result_dist.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"agg_result_dist_ap_vld\" :  \"" << agg_result_dist_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"agg_result_end_position\" :  \"" << agg_result_end_position.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"agg_result_end_position_ap_vld\" :  \"" << agg_result_end_position_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_address0\" :  \"" << x_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_ce0\" :  \"" << x_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_q0\" :  \"" << x_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_address0\" :  \"" << y_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_ce0\" :  \"" << y_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"y_q0\" :  \"" << y_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

