// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="subsequence_search,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.358000,HLS_SYN_LAT=36324256,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=590,HLS_SYN_LUT=1217,HLS_VERSION=2020_1}" *)

module subsequence_search (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        agg_result_dist,
        agg_result_dist_ap_vld,
        agg_result_end_position,
        agg_result_end_position_ap_vld,
        x_address0,
        x_ce0,
        x_q0,
        y_address0,
        y_ce0,
        y_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] agg_result_dist;
output   agg_result_dist_ap_vld;
output  [31:0] agg_result_end_position;
output   agg_result_end_position_ap_vld;
output  [7:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;
output  [15:0] y_address0;
output   y_ce0;
input  [31:0] y_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg agg_result_dist_ap_vld;
reg agg_result_end_position_ap_vld;
reg[7:0] x_address0;
reg x_ce0;
reg[15:0] y_address0;
reg y_ce0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_311;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_291_p2;
reg   [31:0] reg_316;
wire    ap_CS_fsm_state5;
wire   [31:0] cost_x_q0;
reg   [31:0] reg_320;
wire    ap_CS_fsm_state7;
reg   [31:0] x_load_reg_557;
wire   [7:0] cost_x_addr_reg_562;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln26_fu_354_p1;
reg   [63:0] zext_ln26_reg_571;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln25_fu_348_p2;
wire   [7:0] r_fu_370_p2;
reg   [7:0] r_reg_586;
reg   [31:0] x_load_2_reg_607;
wire   [31:0] zext_ln33_fu_391_p1;
reg   [31:0] zext_ln33_reg_612;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln33_fu_395_p2;
wire    ap_CS_fsm_state10;
wire   [31:0] cost_x_q1;
wire   [31:0] grp_fu_338_p3;
wire   [63:0] zext_ln43_fu_412_p1;
reg   [63:0] zext_ln43_reg_643;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln42_fu_406_p2;
wire   [31:0] grp_fu_303_p3;
reg   [31:0] select_ln7_1_reg_653;
wire   [7:0] i_fu_417_p2;
reg   [7:0] i_reg_659;
wire   [31:0] add_ln50_fu_467_p2;
reg   [31:0] add_ln50_reg_669;
wire   [15:0] j_fu_473_p2;
reg   [15:0] j_reg_677;
wire   [31:0] sub_ln43_fu_479_p2;
reg   [31:0] sub_ln43_reg_682;
wire    ap_CS_fsm_state12;
reg   [31:0] left_1_reg_689;
wire   [31:0] top_1_fu_514_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] select_ln51_fu_526_p3;
wire    ap_CS_fsm_state14;
wire   [31:0] select_ln51_1_fu_533_p3;
wire   [31:0] select_ln51_2_fu_540_p3;
reg   [7:0] cost_x_address0;
reg    cost_x_ce0;
reg    cost_x_we0;
reg   [31:0] cost_x_d0;
reg   [7:0] cost_x_address1;
reg    cost_x_ce1;
reg    cost_x_we1;
reg   [31:0] cost_x_d1;
reg   [7:0] r_0_reg_193;
wire    ap_CS_fsm_state6;
reg   [31:0] agg_result_dist_loca_reg_204;
reg   [31:0] agg_result_end_posit_reg_215;
reg   [31:0] agg_result_dist_load_reg_228;
reg   [15:0] j_0_reg_238;
reg   [31:0] min_1_reg_250;
reg   [31:0] top_left_1_reg_260;
reg   [31:0] min_reg_271;
reg   [7:0] i_0_reg_280;
wire   [63:0] zext_ln26_1_fu_365_p1;
wire   [63:0] zext_ln36_fu_401_p1;
wire   [63:0] zext_ln45_fu_423_p1;
wire   [31:0] add_ln26_1_fu_384_p2;
reg   [31:0] grp_fu_291_p0;
reg   [31:0] grp_fu_291_p1;
wire   [0:0] grp_fu_297_p2;
wire   [0:0] grp_fu_332_p2;
wire   [31:0] grp_fu_326_p2;
wire   [7:0] add_ln26_fu_359_p2;
wire   [31:0] abs5_fu_376_p3;
wire   [31:0] sub_ln50_fu_428_p2;
wire   [0:0] abscond13_fu_439_p2;
wire   [31:0] neg12_fu_433_p2;
wire   [0:0] icmp_ln11_fu_453_p2;
wire   [31:0] abs14_fu_445_p3;
wire   [31:0] min_2_fu_459_p3;
wire   [0:0] abscond10_fu_490_p2;
wire   [31:0] neg9_fu_485_p2;
wire   [0:0] icmp_ln11_1_fu_502_p2;
wire   [31:0] min_3_fu_507_p3;
wire   [31:0] abs11_fu_495_p3;
wire   [0:0] icmp_ln51_fu_521_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

subsequence_searcbkb #(
    .DataWidth( 32 ),
    .AddressRange( 250 ),
    .AddressWidth( 8 ))
cost_x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cost_x_address0),
    .ce0(cost_x_ce0),
    .we0(cost_x_we0),
    .d0(cost_x_d0),
    .q0(cost_x_q0),
    .address1(cost_x_address1),
    .ce1(cost_x_ce1),
    .we1(cost_x_we1),
    .d1(cost_x_d1),
    .q1(cost_x_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        agg_result_dist_load_reg_228 <= select_ln51_2_fu_540_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        agg_result_dist_load_reg_228 <= cost_x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        agg_result_dist_loca_reg_204 <= select_ln51_fu_526_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        agg_result_dist_loca_reg_204 <= cost_x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        agg_result_end_posit_reg_215 <= select_ln51_1_fu_533_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        agg_result_end_posit_reg_215 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_0_reg_280 <= i_reg_659;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_0_reg_280 <= 8'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_0_reg_238 <= j_reg_677;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_reg_238 <= 16'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        min_1_reg_250 <= top_left_1_reg_260;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        min_1_reg_250 <= cost_x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        min_reg_271 <= top_1_fu_514_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        min_reg_271 <= grp_fu_338_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_0_reg_193 <= r_reg_586;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_0_reg_193 <= 8'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        top_left_1_reg_260 <= left_1_reg_689;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        top_left_1_reg_260 <= cost_x_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln42_fu_406_p2 == 1'd1))) begin
        add_ln50_reg_669 <= add_ln50_fu_467_p2;
        j_reg_677 <= j_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln42_fu_406_p2 == 1'd0))) begin
        i_reg_659 <= i_fu_417_p2;
        select_ln7_1_reg_653 <= grp_fu_303_p3;
        zext_ln43_reg_643[7 : 0] <= zext_ln43_fu_412_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        left_1_reg_689 <= cost_x_q1;
        sub_ln43_reg_682 <= sub_ln43_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_348_p2 == 1'd0))) begin
        r_reg_586 <= r_fu_370_p2;
        zext_ln26_reg_571[7 : 0] <= zext_ln26_fu_354_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_311 <= y_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_316 <= grp_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_320 <= cost_x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_load_2_reg_607 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_load_reg_557 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        zext_ln33_reg_612[15 : 0] <= zext_ln33_fu_391_p1[15 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln33_fu_395_p2 == 1'd1))) begin
        agg_result_dist_ap_vld = 1'b1;
    end else begin
        agg_result_dist_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln33_fu_395_p2 == 1'd1))) begin
        agg_result_end_position_ap_vld = 1'b1;
    end else begin
        agg_result_end_position_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln33_fu_395_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln33_fu_395_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cost_x_address0 = cost_x_addr_reg_562;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        cost_x_address0 = zext_ln26_reg_571;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_348_p2 == 1'd1))) begin
        cost_x_address0 = 64'd249;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_348_p2 == 1'd0))) begin
        cost_x_address0 = zext_ln26_1_fu_365_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cost_x_address0 = 64'd0;
    end else begin
        cost_x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        cost_x_address1 = 64'd249;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        cost_x_address1 = zext_ln43_reg_643;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        cost_x_address1 = zext_ln45_fu_423_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cost_x_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cost_x_address1 = 64'd1;
    end else begin
        cost_x_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_348_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_348_p2 == 1'd0)))) begin
        cost_x_ce0 = 1'b1;
    end else begin
        cost_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        cost_x_ce1 = 1'b1;
    end else begin
        cost_x_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        cost_x_d0 = add_ln26_1_fu_384_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cost_x_d0 = grp_fu_338_p3;
    end else begin
        cost_x_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        cost_x_d1 = add_ln50_reg_669;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        cost_x_d1 = top_1_fu_514_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cost_x_d1 = grp_fu_338_p3;
    end else begin
        cost_x_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        cost_x_we0 = 1'b1;
    end else begin
        cost_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10))) begin
        cost_x_we1 = 1'b1;
    end else begin
        cost_x_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_291_p0 = x_load_reg_557;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_291_p0 = x_q0;
    end else begin
        grp_fu_291_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_291_p1 = reg_311;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_291_p1 = y_q0;
    end else begin
        grp_fu_291_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        x_address0 = zext_ln43_fu_412_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_348_p2 == 1'd1))) begin
        x_address0 = 64'd249;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_348_p2 == 1'd0))) begin
        x_address0 = zext_ln26_fu_354_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_address0 = 64'd0;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_348_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_348_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        y_address0 = zext_ln36_fu_401_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        y_address0 = 64'd0;
    end else begin
        y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        y_ce0 = 1'b1;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln25_fu_348_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln33_fu_395_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln42_fu_406_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs11_fu_495_p3 = ((abscond10_fu_490_p2[0:0] === 1'b1) ? sub_ln43_reg_682 : neg9_fu_485_p2);

assign abs14_fu_445_p3 = ((abscond13_fu_439_p2[0:0] === 1'b1) ? sub_ln50_fu_428_p2 : neg12_fu_433_p2);

assign abs5_fu_376_p3 = ((grp_fu_332_p2[0:0] === 1'b1) ? reg_316 : grp_fu_326_p2);

assign abscond10_fu_490_p2 = (($signed(sub_ln43_reg_682) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign abscond13_fu_439_p2 = (($signed(sub_ln50_fu_428_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign add_ln26_1_fu_384_p2 = (reg_320 + abs5_fu_376_p3);

assign add_ln26_fu_359_p2 = ($signed(r_0_reg_193) + $signed(8'd255));

assign add_ln50_fu_467_p2 = (abs14_fu_445_p3 + min_2_fu_459_p3);

assign agg_result_dist = agg_result_dist_loca_reg_204;

assign agg_result_end_position = agg_result_end_posit_reg_215;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign cost_x_addr_reg_562 = 64'd0;

assign grp_fu_291_p2 = (grp_fu_291_p0 - grp_fu_291_p1);

assign grp_fu_297_p2 = (($signed(top_left_1_reg_260) < $signed(min_reg_271)) ? 1'b1 : 1'b0);

assign grp_fu_303_p3 = ((grp_fu_297_p2[0:0] === 1'b1) ? top_left_1_reg_260 : min_reg_271);

assign grp_fu_326_p2 = (32'd0 - reg_316);

assign grp_fu_332_p2 = (($signed(reg_316) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign grp_fu_338_p3 = ((grp_fu_332_p2[0:0] === 1'b1) ? reg_316 : grp_fu_326_p2);

assign i_fu_417_p2 = (i_0_reg_280 + 8'd1);

assign icmp_ln11_1_fu_502_p2 = (($signed(select_ln7_1_reg_653) > $signed(min_1_reg_250)) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_453_p2 = (($signed(grp_fu_303_p3) > $signed(min_1_reg_250)) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_348_p2 = ((r_0_reg_193 == 8'd250) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_395_p2 = ((j_0_reg_238 == 16'd48497) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_406_p2 = ((i_0_reg_280 == 8'd249) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_521_p2 = (($signed(add_ln50_reg_669) < $signed(agg_result_dist_load_reg_228)) ? 1'b1 : 1'b0);

assign j_fu_473_p2 = (j_0_reg_238 + 16'd1);

assign min_2_fu_459_p3 = ((icmp_ln11_fu_453_p2[0:0] === 1'b1) ? min_1_reg_250 : grp_fu_303_p3);

assign min_3_fu_507_p3 = ((icmp_ln11_1_fu_502_p2[0:0] === 1'b1) ? min_1_reg_250 : select_ln7_1_reg_653);

assign neg12_fu_433_p2 = (32'd0 - sub_ln50_fu_428_p2);

assign neg9_fu_485_p2 = (32'd0 - sub_ln43_reg_682);

assign r_fu_370_p2 = (r_0_reg_193 + 8'd1);

assign select_ln51_1_fu_533_p3 = ((icmp_ln51_fu_521_p2[0:0] === 1'b1) ? zext_ln33_reg_612 : agg_result_end_posit_reg_215);

assign select_ln51_2_fu_540_p3 = ((icmp_ln51_fu_521_p2[0:0] === 1'b1) ? add_ln50_reg_669 : agg_result_dist_load_reg_228);

assign select_ln51_fu_526_p3 = ((icmp_ln51_fu_521_p2[0:0] === 1'b1) ? add_ln50_reg_669 : agg_result_dist_loca_reg_204);

assign sub_ln43_fu_479_p2 = (x_q0 - reg_311);

assign sub_ln50_fu_428_p2 = (x_load_2_reg_607 - reg_311);

assign top_1_fu_514_p2 = (min_3_fu_507_p3 + abs11_fu_495_p3);

assign zext_ln26_1_fu_365_p1 = add_ln26_fu_359_p2;

assign zext_ln26_fu_354_p1 = r_0_reg_193;

assign zext_ln33_fu_391_p1 = j_0_reg_238;

assign zext_ln36_fu_401_p1 = j_0_reg_238;

assign zext_ln43_fu_412_p1 = i_0_reg_280;

assign zext_ln45_fu_423_p1 = i_fu_417_p2;

always @ (posedge ap_clk) begin
    zext_ln26_reg_571[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln33_reg_612[31:16] <= 16'b0000000000000000;
    zext_ln43_reg_643[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //subsequence_search
