-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subsequence_search is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    agg_result_dist : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_dist_ap_vld : OUT STD_LOGIC;
    agg_result_end_position : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_end_position_ap_vld : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_ce0 : OUT STD_LOGIC;
    y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subsequence_search is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "subsequence_search,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.358000,HLS_SYN_LAT=36324256,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=590,HLS_SYN_LUT=1217,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_F9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011111001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_FA : STD_LOGIC_VECTOR (7 downto 0) := "11111010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv16_BD71 : STD_LOGIC_VECTOR (15 downto 0) := "1011110101110001";
    constant ap_const_lv8_F9 : STD_LOGIC_VECTOR (7 downto 0) := "11111001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal cost_x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal x_load_reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal cost_x_addr_reg_562 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln26_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_571 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln25_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_370_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_reg_586 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_load_2_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln33_fu_391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln33_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln33_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal cost_x_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln43_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_reg_643 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln42_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln7_1_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_417_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_659 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln50_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln50_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_473_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_677 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln43_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln43_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal left_1_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal top_1_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal select_ln51_fu_526_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal select_ln51_1_fu_533_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_2_fu_540_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cost_x_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cost_x_ce0 : STD_LOGIC;
    signal cost_x_we0 : STD_LOGIC;
    signal cost_x_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cost_x_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cost_x_ce1 : STD_LOGIC;
    signal cost_x_we1 : STD_LOGIC;
    signal cost_x_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_0_reg_193 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal agg_result_dist_loca_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_end_posit_reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_dist_load_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal min_1_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal top_left_1_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_280 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_1_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_1_fu_384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_291_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_fu_359_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal abs5_fu_376_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln50_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond13_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg12_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal abs14_fu_445_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_2_fu_459_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond10_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg9_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_1_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_3_fu_507_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs11_fu_495_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln51_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component subsequence_searcbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cost_x_U : component subsequence_searcbkb
    generic map (
        DataWidth => 32,
        AddressRange => 250,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cost_x_address0,
        ce0 => cost_x_ce0,
        we0 => cost_x_we0,
        d0 => cost_x_d0,
        q0 => cost_x_q0,
        address1 => cost_x_address1,
        ce1 => cost_x_ce1,
        we1 => cost_x_we1,
        d1 => cost_x_d1,
        q1 => cost_x_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    agg_result_dist_load_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                agg_result_dist_load_reg_228 <= select_ln51_2_fu_540_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                agg_result_dist_load_reg_228 <= cost_x_q0;
            end if; 
        end if;
    end process;

    agg_result_dist_loca_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                agg_result_dist_loca_reg_204 <= select_ln51_fu_526_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                agg_result_dist_loca_reg_204 <= cost_x_q0;
            end if; 
        end if;
    end process;

    agg_result_end_posit_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                agg_result_end_posit_reg_215 <= select_ln51_1_fu_533_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                agg_result_end_posit_reg_215 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_0_reg_280 <= i_reg_659;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_0_reg_280 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    j_0_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_0_reg_238 <= j_reg_677;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_reg_238 <= ap_const_lv16_1;
            end if; 
        end if;
    end process;

    min_1_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                min_1_reg_250 <= top_left_1_reg_260;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                min_1_reg_250 <= cost_x_q0;
            end if; 
        end if;
    end process;

    min_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                min_reg_271 <= top_1_fu_514_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                min_reg_271 <= grp_fu_338_p3;
            end if; 
        end if;
    end process;

    r_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                r_0_reg_193 <= r_reg_586;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                r_0_reg_193 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    top_left_1_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                top_left_1_reg_260 <= left_1_reg_689;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                top_left_1_reg_260 <= cost_x_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln42_fu_406_p2 = ap_const_lv1_1))) then
                add_ln50_reg_669 <= add_ln50_fu_467_p2;
                j_reg_677 <= j_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln42_fu_406_p2 = ap_const_lv1_0))) then
                i_reg_659 <= i_fu_417_p2;
                select_ln7_1_reg_653 <= grp_fu_303_p3;
                    zext_ln43_reg_643(7 downto 0) <= zext_ln43_fu_412_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                left_1_reg_689 <= cost_x_q1;
                sub_ln43_reg_682 <= sub_ln43_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln25_fu_348_p2 = ap_const_lv1_0))) then
                r_reg_586 <= r_fu_370_p2;
                    zext_ln26_reg_571(7 downto 0) <= zext_ln26_fu_354_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_311 <= y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_316 <= grp_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_320 <= cost_x_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                x_load_2_reg_607 <= x_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                x_load_reg_557 <= x_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    zext_ln33_reg_612(15 downto 0) <= zext_ln33_fu_391_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln26_reg_571(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln33_reg_612(31 downto 16) <= "0000000000000000";
    zext_ln43_reg_643(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln25_fu_348_p2, ap_CS_fsm_state8, icmp_ln33_fu_395_p2, ap_CS_fsm_state11, icmp_ln42_fu_406_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln25_fu_348_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln33_fu_395_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln42_fu_406_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    abs11_fu_495_p3 <= 
        sub_ln43_reg_682 when (abscond10_fu_490_p2(0) = '1') else 
        neg9_fu_485_p2;
    abs14_fu_445_p3 <= 
        sub_ln50_fu_428_p2 when (abscond13_fu_439_p2(0) = '1') else 
        neg12_fu_433_p2;
    abs5_fu_376_p3 <= 
        reg_316 when (grp_fu_332_p2(0) = '1') else 
        grp_fu_326_p2;
    abscond10_fu_490_p2 <= "1" when (signed(sub_ln43_reg_682) > signed(ap_const_lv32_0)) else "0";
    abscond13_fu_439_p2 <= "1" when (signed(sub_ln50_fu_428_p2) > signed(ap_const_lv32_0)) else "0";
    add_ln26_1_fu_384_p2 <= std_logic_vector(unsigned(reg_320) + unsigned(abs5_fu_376_p3));
    add_ln26_fu_359_p2 <= std_logic_vector(unsigned(r_0_reg_193) + unsigned(ap_const_lv8_FF));
    add_ln50_fu_467_p2 <= std_logic_vector(unsigned(abs14_fu_445_p3) + unsigned(min_2_fu_459_p3));
    agg_result_dist <= agg_result_dist_loca_reg_204;

    agg_result_dist_ap_vld_assign_proc : process(ap_CS_fsm_state8, icmp_ln33_fu_395_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln33_fu_395_p2 = ap_const_lv1_1))) then 
            agg_result_dist_ap_vld <= ap_const_logic_1;
        else 
            agg_result_dist_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_end_position <= agg_result_end_posit_reg_215;

    agg_result_end_position_ap_vld_assign_proc : process(ap_CS_fsm_state8, icmp_ln33_fu_395_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln33_fu_395_p2 = ap_const_lv1_1))) then 
            agg_result_end_position_ap_vld <= ap_const_logic_1;
        else 
            agg_result_end_position_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state8, icmp_ln33_fu_395_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln33_fu_395_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln33_fu_395_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln33_fu_395_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cost_x_addr_reg_562 <= ap_const_lv64_0(8 - 1 downto 0);

    cost_x_address0_assign_proc : process(ap_CS_fsm_state9, cost_x_addr_reg_562, ap_CS_fsm_state3, zext_ln26_reg_571, ap_CS_fsm_state4, icmp_ln25_fu_348_p2, ap_CS_fsm_state6, zext_ln26_1_fu_365_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cost_x_address0 <= cost_x_addr_reg_562;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cost_x_address0 <= zext_ln26_reg_571(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln25_fu_348_p2 = ap_const_lv1_1))) then 
            cost_x_address0 <= ap_const_lv64_F9(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln25_fu_348_p2 = ap_const_lv1_0))) then 
            cost_x_address0 <= zext_ln26_1_fu_365_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cost_x_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        else 
            cost_x_address0 <= "XXXXXXXX";
        end if; 
    end process;


    cost_x_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln43_reg_643, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, zext_ln45_fu_423_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            cost_x_address1 <= ap_const_lv64_F9(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            cost_x_address1 <= zext_ln43_reg_643(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            cost_x_address1 <= zext_ln45_fu_423_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cost_x_address1 <= ap_const_lv64_0(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cost_x_address1 <= ap_const_lv64_1(8 - 1 downto 0);
        else 
            cost_x_address1 <= "XXXXXXXX";
        end if; 
    end process;


    cost_x_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln25_fu_348_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln25_fu_348_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln25_fu_348_p2 = ap_const_lv1_0)))) then 
            cost_x_ce0 <= ap_const_logic_1;
        else 
            cost_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cost_x_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            cost_x_ce1 <= ap_const_logic_1;
        else 
            cost_x_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cost_x_d0_assign_proc : process(ap_CS_fsm_state3, grp_fu_338_p3, ap_CS_fsm_state6, add_ln26_1_fu_384_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cost_x_d0 <= add_ln26_1_fu_384_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cost_x_d0 <= grp_fu_338_p3;
        else 
            cost_x_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cost_x_d1_assign_proc : process(ap_CS_fsm_state10, grp_fu_338_p3, add_ln50_reg_669, top_1_fu_514_p2, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            cost_x_d1 <= add_ln50_reg_669;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            cost_x_d1 <= top_1_fu_514_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            cost_x_d1 <= grp_fu_338_p3;
        else 
            cost_x_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cost_x_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            cost_x_we0 <= ap_const_logic_1;
        else 
            cost_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cost_x_we1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            cost_x_we1 <= ap_const_logic_1;
        else 
            cost_x_we1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_291_p0_assign_proc : process(x_q0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state5, x_load_reg_557)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_291_p0 <= x_load_reg_557;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_291_p0 <= x_q0;
        else 
            grp_fu_291_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_291_p1_assign_proc : process(y_q0, reg_311, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_291_p1 <= reg_311;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_291_p1 <= y_q0;
        else 
            grp_fu_291_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_291_p2 <= std_logic_vector(unsigned(grp_fu_291_p0) - unsigned(grp_fu_291_p1));
    grp_fu_297_p2 <= "1" when (signed(top_left_1_reg_260) < signed(min_reg_271)) else "0";
    grp_fu_303_p3 <= 
        top_left_1_reg_260 when (grp_fu_297_p2(0) = '1') else 
        min_reg_271;
    grp_fu_326_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(reg_316));
    grp_fu_332_p2 <= "1" when (signed(reg_316) > signed(ap_const_lv32_0)) else "0";
    grp_fu_338_p3 <= 
        reg_316 when (grp_fu_332_p2(0) = '1') else 
        grp_fu_326_p2;
    i_fu_417_p2 <= std_logic_vector(unsigned(i_0_reg_280) + unsigned(ap_const_lv8_1));
    icmp_ln11_1_fu_502_p2 <= "1" when (signed(select_ln7_1_reg_653) > signed(min_1_reg_250)) else "0";
    icmp_ln11_fu_453_p2 <= "1" when (signed(grp_fu_303_p3) > signed(min_1_reg_250)) else "0";
    icmp_ln25_fu_348_p2 <= "1" when (r_0_reg_193 = ap_const_lv8_FA) else "0";
    icmp_ln33_fu_395_p2 <= "1" when (j_0_reg_238 = ap_const_lv16_BD71) else "0";
    icmp_ln42_fu_406_p2 <= "1" when (i_0_reg_280 = ap_const_lv8_F9) else "0";
    icmp_ln51_fu_521_p2 <= "1" when (signed(add_ln50_reg_669) < signed(agg_result_dist_load_reg_228)) else "0";
    j_fu_473_p2 <= std_logic_vector(unsigned(j_0_reg_238) + unsigned(ap_const_lv16_1));
    min_2_fu_459_p3 <= 
        min_1_reg_250 when (icmp_ln11_fu_453_p2(0) = '1') else 
        grp_fu_303_p3;
    min_3_fu_507_p3 <= 
        min_1_reg_250 when (icmp_ln11_1_fu_502_p2(0) = '1') else 
        select_ln7_1_reg_653;
    neg12_fu_433_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln50_fu_428_p2));
    neg9_fu_485_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln43_reg_682));
    r_fu_370_p2 <= std_logic_vector(unsigned(r_0_reg_193) + unsigned(ap_const_lv8_1));
    select_ln51_1_fu_533_p3 <= 
        zext_ln33_reg_612 when (icmp_ln51_fu_521_p2(0) = '1') else 
        agg_result_end_posit_reg_215;
    select_ln51_2_fu_540_p3 <= 
        add_ln50_reg_669 when (icmp_ln51_fu_521_p2(0) = '1') else 
        agg_result_dist_load_reg_228;
    select_ln51_fu_526_p3 <= 
        add_ln50_reg_669 when (icmp_ln51_fu_521_p2(0) = '1') else 
        agg_result_dist_loca_reg_204;
    sub_ln43_fu_479_p2 <= std_logic_vector(unsigned(x_q0) - unsigned(reg_311));
    sub_ln50_fu_428_p2 <= std_logic_vector(unsigned(x_load_2_reg_607) - unsigned(reg_311));
    top_1_fu_514_p2 <= std_logic_vector(unsigned(min_3_fu_507_p3) + unsigned(abs11_fu_495_p3));

    x_address0_assign_proc : process(ap_CS_fsm_state1, zext_ln26_fu_354_p1, ap_CS_fsm_state4, icmp_ln25_fu_348_p2, zext_ln43_fu_412_p1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x_address0 <= zext_ln43_fu_412_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln25_fu_348_p2 = ap_const_lv1_1))) then 
            x_address0 <= ap_const_lv64_F9(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln25_fu_348_p2 = ap_const_lv1_0))) then 
            x_address0 <= zext_ln26_fu_354_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            x_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        else 
            x_address0 <= "XXXXXXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln25_fu_348_p2, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln25_fu_348_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln25_fu_348_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state8, zext_ln36_fu_401_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_address0 <= zext_ln36_fu_401_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            y_address0 <= ap_const_lv64_0(16 - 1 downto 0);
        else 
            y_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln26_1_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_359_p2),64));
    zext_ln26_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_193),64));
    zext_ln33_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_238),32));
    zext_ln36_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_238),64));
    zext_ln43_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_280),64));
    zext_ln45_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_417_p2),64));
end behav;
